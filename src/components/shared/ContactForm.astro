---
// src/components/shared/ContactForm.astro - Corregido
import MessageAlert from './MessageAlert.astro';

export interface Props {
  title?: string;
  showSubjectField?: boolean;
  submitButtonText?: string;
  successMessage?: string;
  errorMessage?: string;
  class?: string;
}

const {
  title = "Envíanos un Mensaje",
  showSubjectField = true,
  submitButtonText = "Enviar Mensaje",
  successMessage = "¡Mensaje enviado exitosamente! Te contactaremos pronto.",
  errorMessage = "Error al enviar el mensaje. Por favor intenta nuevamente.",
  class: className = ""
} = Astro.props;

const subjectOptions = [
  { value: "", label: "Selecciona un asunto" },
  { value: "reservacion", label: "Reservación" },
  { value: "consulta", label: "Consulta General" },
  { value: "evento", label: "Evento Especial" },
  { value: "sugerencia", label: "Sugerencia o Comentario" },
  { value: "otro", label: "Otro" }
];
---

<div class={`bg-white rounded-lg shadow-lg p-8 ${className}`}>
  <h2 class="font-display text-2xl font-bold text-gray-900 mb-6">
    {title}
  </h2>
  
  <form id="contactForm" class="space-y-6">
    <!-- Personal Information -->
    <div class="grid grid-cols-1 sm:grid-cols-2 gap-6">
      <div>
        <label for="firstName" class="block text-sm font-medium text-gray-700 mb-2">
          Nombre *
        </label>
        <input 
          type="text" 
          id="firstName" 
          name="firstName" 
          required
          class="w-full px-4 py-3 border border-gray-300 rounded-lg focus:ring-2 focus:ring-amber-500 focus:border-amber-500 transition-colors"
          placeholder="Tu nombre"
        />
      </div>
      
      <div>
        <label for="lastName" class="block text-sm font-medium text-gray-700 mb-2">
          Apellido *
        </label>
        <input 
          type="text" 
          id="lastName" 
          name="lastName" 
          required
          class="w-full px-4 py-3 border border-gray-300 rounded-lg focus:ring-2 focus:ring-amber-500 focus:border-amber-500 transition-colors"
          placeholder="Tu apellido"
        />
      </div>
    </div>
    
    <div>
      <label for="email" class="block text-sm font-medium text-gray-700 mb-2">
        Correo Electrónico *
      </label>
      <input 
        type="email" 
        id="email" 
        name="email" 
        required
        class="w-full px-4 py-3 border border-gray-300 rounded-lg focus:ring-2 focus:ring-amber-500 focus:border-amber-500 transition-colors"
        placeholder="tu@email.com"
      />
    </div>
    
    <div>
      <label for="phone" class="block text-sm font-medium text-gray-700 mb-2">
        Teléfono
      </label>
      <input 
        type="tel" 
        id="phone" 
        name="phone"
        class="w-full px-4 py-3 border border-gray-300 rounded-lg focus:ring-2 focus:ring-amber-500 focus:border-amber-500 transition-colors"
        placeholder="+504 0000-0000"
      />
    </div>
    
    {showSubjectField && (
      <div>
        <label for="subject" class="block text-sm font-medium text-gray-700 mb-2">
          Asunto *
        </label>
        <select 
          id="subject" 
          name="subject" 
          required
          class="w-full px-4 py-3 border border-gray-300 rounded-lg focus:ring-2 focus:ring-amber-500 focus:border-amber-500 transition-colors"
        >
          {subjectOptions.map(option => (
            <option value={option.value}>{option.label}</option>
          ))}
        </select>
      </div>
    )}
    
    <div>
      <label for="message" class="block text-sm font-medium text-gray-700 mb-2">
        Mensaje *
      </label>
      <textarea 
        id="message" 
        name="message" 
        rows="5" 
        required
        class="w-full px-4 py-3 border border-gray-300 rounded-lg focus:ring-2 focus:ring-amber-500 focus:border-amber-500 transition-colors resize-none"
        placeholder="Escribe tu mensaje aquí..."
      ></textarea>
    </div>
    
    <button 
      type="submit" 
      class="w-full bg-amber-600 hover:bg-amber-700 text-white py-3 px-6 rounded-lg font-semibold transition-colors duration-300 transform hover:scale-105 disabled:opacity-50 disabled:cursor-not-allowed disabled:hover:scale-100"
    >
      {submitButtonText}
    </button>
  </form>
  
  <!-- Success/Error Messages - Inicialmente ocultos -->
  <div id="formMessage" class="mt-6 hidden">
    <!-- Success Message -->
    <div id="successMessage" class="hidden">
      <MessageAlert 
        id="contactSuccess"
        variant="success" 
        title="¡Éxito!" 
        message={successMessage}
        dismissible={true}
      />
    </div>
    
    <!-- Error Message -->
    <div id="errorMessage" class="hidden">
      <MessageAlert 
        id="contactError"
        variant="error" 
        title="Error" 
        message={errorMessage}
        dismissible={true}
      />
    </div>
  </div>
</div>

<script>
  document.addEventListener('DOMContentLoaded', function() {
    const contactForm = document.getElementById('contactForm') as HTMLFormElement;
    const formMessage = document.getElementById('formMessage') as HTMLElement;
    const successMessage = document.getElementById('successMessage') as HTMLElement;
    const errorMessage = document.getElementById('errorMessage') as HTMLElement;
    const phoneInput = document.getElementById('phone') as HTMLInputElement;
    
    if (contactForm) {
      contactForm.addEventListener('submit', async function(this: HTMLFormElement, e: Event) {
        e.preventDefault();
        
        const submitButton = this.querySelector('button[type="submit"]') as HTMLButtonElement;
        if (!submitButton) return;
        
        const originalText = submitButton.textContent || 'Enviar Mensaje';
        submitButton.textContent = 'Enviando...';
        submitButton.disabled = true;
        
        try {
          // Simulate form submission (replace with actual endpoint)
          await new Promise(resolve => setTimeout(resolve, 1500));
          
          // Show success message
          if (formMessage && successMessage && errorMessage) {
            // Hide any previous messages
            errorMessage.classList.add('hidden');
            
            // Show success message
            formMessage.classList.remove('hidden');
            successMessage.classList.remove('hidden');
          }
          
          // Reset form
          this.reset();
          
          // Scroll to message
          if (formMessage) {
            formMessage.scrollIntoView({ behavior: 'smooth', block: 'center' });
          }
          
        } catch (error) {
          // Show error message
          if (formMessage && successMessage && errorMessage) {
            // Hide any previous messages
            successMessage.classList.add('hidden');
            
            // Show error message
            formMessage.classList.remove('hidden');
            errorMessage.classList.remove('hidden');
          }
          
        } finally {
          // Reset button
          submitButton.textContent = originalText;
          submitButton.disabled = false;
        }
      });
    }
    
    // Phone number formatting
    if (phoneInput) {
      phoneInput.addEventListener('input', function(this: HTMLInputElement) {
        let value = this.value.replace(/\D/g, '');
        if (value.startsWith('504')) {
          value = value.substring(3);
        }
        if (value.length >= 4) {
          value = value.substring(0, 4) + '-' + value.substring(4, 8);
        }
        if (value) {
          this.value = '+504 ' + value;
        }
      });
    }
    
    // Form validation enhancements
    const requiredInputs = document.querySelectorAll('#contactForm input[required], #contactForm select[required], #contactForm textarea[required]');
    requiredInputs.forEach(input => {
      const inputElement = input as HTMLInputElement | HTMLSelectElement | HTMLTextAreaElement;
      
      inputElement.addEventListener('blur', function(this: HTMLInputElement | HTMLSelectElement | HTMLTextAreaElement) {
        if (!this.value.trim()) {
          this.classList.add('border-red-300');
          this.classList.remove('border-gray-300');
        } else {
          this.classList.remove('border-red-300');
          this.classList.add('border-gray-300');
        }
      });
      
      inputElement.addEventListener('input', function(this: HTMLInputElement | HTMLSelectElement | HTMLTextAreaElement) {
        if (this.value.trim()) {
          this.classList.remove('border-red-300');
          this.classList.add('border-gray-300');
        }
      });
    });
  });
</script>