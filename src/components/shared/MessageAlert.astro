---
// src/components/shared/MessageAlert.astro
export interface Props {
  id?: string;
  variant?: 'success' | 'error' | 'warning' | 'info';
  title?: string;
  message: string;
  dismissible?: boolean;
  showIcon?: boolean;
  class?: string;
}

const {
  id,
  variant = 'info',
  title,
  message,
  dismissible = true,
  showIcon = true,
  class: className = ''
} = Astro.props;

// Configuraci√≥n de estilos por variante
const variants = {
  success: {
    container: 'bg-green-100 border-green-400 text-green-700',
    icon: 'text-green-500',
    iconPath: 'M9 12l2 2 4-4m6 2a9 9 0 11-18 0 9 9 0 0118 0z'
  },
  error: {
    container: 'bg-red-100 border-red-400 text-red-700',
    icon: 'text-red-500',
    iconPath: 'M10 14l2-2m0 0l2-2m-2 2l-2-2m2 2l2 2m7-2a9 9 0 11-18 0 9 9 0 0118 0z'
  },
  warning: {
    container: 'bg-yellow-100 border-yellow-400 text-yellow-700',
    icon: 'text-yellow-500',
    iconPath: 'M12 9v2m0 4h.01m-6.938 4h13.856c1.54 0 2.502-1.667 1.732-2.5L13.732 4c-.77-.833-1.964-.833-2.732 0L3.732 16c-.77.833.192 2.5 1.732 2.5z'
  },
  info: {
    container: 'bg-blue-100 border-blue-400 text-blue-700',
    icon: 'text-blue-500',
    iconPath: 'M13 16h-1v-4h-1m1-4h.01M21 12a9 9 0 11-18 0 9 9 0 0118 0z'
  }
};

const currentVariant = variants[variant];
const classes = `border px-4 py-3 rounded-lg relative ${currentVariant.container} ${className}`;
---

<div 
  class={classes}
  role="alert"
  id={id}
>
  <div class="flex items-start space-x-3">
    <!-- Icon -->
    {showIcon && (
      <div class="flex-shrink-0">
        <svg 
          class={`w-5 h-5 ${currentVariant.icon}`}
          fill="none" 
          stroke="currentColor" 
          viewBox="0 0 24 24"
        >
          <path 
            stroke-linecap="round" 
            stroke-linejoin="round" 
            stroke-width="2" 
            d={currentVariant.iconPath}
          />
        </svg>
      </div>
    )}
    
    <!-- Content -->
    <div class="flex-1 min-w-0">
      {title && (
        <h4 class="font-semibold mb-1">{title}</h4>
      )}
      <p class="text-sm leading-relaxed">{message}</p>
    </div>
    
    <!-- Dismiss button -->
    {dismissible && (
      <button 
        type="button"
        class="flex-shrink-0 ml-4 inline-flex text-current hover:text-opacity-75 focus:outline-none focus:ring-2 focus:ring-offset-2 focus:ring-current p-1 rounded-md transition-colors"
        onclick="this.closest('[role=alert]').style.display='none'"
        aria-label="Cerrar alerta"
      >
        <svg class="w-4 h-4" fill="none" stroke="currentColor" viewBox="0 0 24 24">
          <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M6 18L18 6M6 6l12 12"/>
        </svg>
      </button>
    )}
  </div>
</div>

{id && dismissible && (
  <script define:vars={{ alertId: id }}>
    document.addEventListener('DOMContentLoaded', function() {
      const alertElement = document.getElementById(alertId);
      
      if (alertElement && alertElement.classList.contains('bg-green-100')) {
        // Auto-hide success messages after 5 seconds
        setTimeout(() => {
          if (alertElement && alertElement.style.display !== 'none') {
            alertElement.style.opacity = '0';
            alertElement.style.transform = 'translateY(-10px)';
            alertElement.style.transition = 'all 0.3s ease-out';
            
            setTimeout(() => {
              if (alertElement) {
                alertElement.style.display = 'none';
              }
            }, 300);
          }
        }, 5000);
      }
    });
  </script>
)}